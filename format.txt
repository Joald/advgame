- Struct means that all field must be included.
- Enum means that you choose one of the options.
- Even if something is written 'ExactlyLikeThis',
  you still have to write it 'exactly_like_this'.
- usize means that it must be a positive number.
- i32 means that it must be a number between -2^31 and 2^31.
- Vec<X> means you need to put X objects in a [X, X, X] list.
- '=' sign after field means it is optional.

type StatValue = i32;

struct Statistic {
    id: usize,
    name: String,
    default_value: StatValue,
}

type ItemSlot = String;

enum ItemEffect {
    no_effect,
    consumable { on_consume: Effect },
    equippable {
        slot: ItemSlot,
        when_equipped: Effect = Effect::no_effect,
        when_unequipped: Effect = Effect::no_effect,
    },
}

struct Item {
    id: usize,
    name: String,
    effect: ItemEffect,
}

enum Condition {
    always,
    if_stat_higher { stat_id: usize, higher_than: StatValue },
    if_stat_lower { stat_id: usize, lower_than: StatValue },
    if_stat_exact { stat_id: usize, value: StatValue },
}

enum Effect {
    no_effect,
    set_stat_higher { stat_id: usize, to_add: StatValue },
    set_stat_lower { stat_id: usize, to_subtract: StatValue },
    set_stat_exact { stat_id: usize, new_value: StatValue },
    use_item { item_id: usize },
}

struct StageOption {
    target_stage: usize,
    text: Vec<String>,
    condition: Condition = Condition::always,
    effect: Effect = Effect::no_effect,
}

struct Stage {
    index: usize,
    name: String,
    text: Vec<String>,
    options: Vec<StageOption>,
}

